"use strict";
const property_1 = require('./property');
function parse(rawDefinition, startingPath) {
    // 1. Loop through keys on object
    // 2. Determine if value assigned to key is a Property or a nested object
    // 3. Convert properties to Property objects
    // 4. Parse nested values recursively
    const parsedObj = {};
    Object.keys(rawDefinition).forEach((key) => {
        const definition = rawDefinition[key];
        const fullPath = startingPath ? [startingPath, key].join('.') : key;
        if (property_1.default.isProperty(definition)) {
            parsedObj[fullPath] = new property_1.default(fullPath, definition);
        }
        else if (property_1.default.isNested(definition)) {
            Object.assign(parsedObj, parse(definition, fullPath));
        }
        else {
            throw new Error(`Property definition for ${fullPath} is illegal`);
        }
    });
    return parsedObj;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = parse;
