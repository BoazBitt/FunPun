import Type from './type';
export interface PropertyDefinition {
    description: string;
    type: string;
    default?: any;
    required?: boolean;
    env?: string;
    argv?: string;
    resolve?(config: Object): any;
    transform?(value: any, config: Object): any;
}
export default class Property {
    path: string;
    definition: PropertyDefinition;
    type: Type;
    static reservedKeys: Array<string>;
    static requiredKeys: Array<string>;
    static isProperty(obj: Object): boolean;
    static isNested(obj: Object): boolean;
    constructor(path: string, definition: PropertyDefinition);
    resolve(rawConfig: Object): any;
    cast(value: any, config: Object): any;
    transform(value: any, rawConfig: Object): any;
    validate(value: any, config: Object): void;
}
